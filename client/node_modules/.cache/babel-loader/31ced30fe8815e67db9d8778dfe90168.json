{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ivanmac/Desktop/lab-profile-app/client/src/hooks/context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, createContext, useContext, useEffect } from 'react';\nimport { currentUserFn } from '../services/auth';\nexport const AppContext = /*#__PURE__*/createContext();\nexport const AppCtxProvider = props => {\n  _s();\n\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    async function getSessionData() {\n      const {\n        data\n      } = await currentUserFn();\n      login(data);\n    }\n\n    getSessionData();\n  }, []);\n\n  const login = userInfo => {\n    setUser(userInfo);\n  };\n\n  const logout = () => {\n    //TODO: Cerrar la sesion en el server y en el cliente\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, { ...props,\n    value: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}; // Opcional: agregamos un custom hook para evitar consumir en cada componente nuestro ctx\n\n_s(AppCtxProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n\n_c = AppCtxProvider;\nexport const useContextInfo = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useContextInfo, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AppCtxProvider\");","map":{"version":3,"sources":["/Users/ivanmac/Desktop/lab-profile-app/client/src/hooks/context.js"],"names":["useState","createContext","useContext","useEffect","currentUserFn","AppContext","AppCtxProvider","props","user","setUser","getSessionData","data","login","userInfo","logout","value","useContextInfo"],"mappings":";;;;;;AAAA,SACEA,QADF,EAEEC,aAFF,EAGEC,UAHF,EAIEC,SAJF,QAKO,OALP;AAOA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,OAAO,MAAMC,UAAU,gBAAGJ,aAAa,EAAhC;AAEP,OAAO,MAAMK,cAAc,GAAGC,KAAK,IAAI;AAAA;;AACrC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,IAAD,CAAhC;AAEAG,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeO,cAAf,GAAgC;AAC9B,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMP,aAAa,EAApC;AACAQ,MAAAA,KAAK,CAACD,IAAD,CAAL;AACD;;AAEDD,IAAAA,cAAc;AACf,GAPQ,EAON,EAPM,CAAT;;AASA,QAAME,KAAK,GAAGC,QAAQ,IAAI;AACxBJ,IAAAA,OAAO,CAACI,QAAD,CAAP;AACD,GAFD;;AAIA,QAAMC,MAAM,GAAG,MAAM;AACnB;AACAL,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAHD;;AAKA,QAAMM,KAAK,GAAG;AAAEP,IAAAA,IAAF;AAAQI,IAAAA,KAAR;AAAeE,IAAAA;AAAf,GAAd;AAEA,sBACE,QAAC,UAAD,CAAY,QAAZ,OAAyBP,KAAzB;AAAgC,IAAA,KAAK,EAAEQ;AAAvC;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CA1BM,C,CA4BP;;GA5BaT,c;;KAAAA,c;AA8Bb,OAAO,MAAMU,cAAc,GAAG;AAAA;;AAAA,SAAMd,UAAU,CAACG,UAAD,CAAhB;AAAA,CAAvB;;IAAMW,c","sourcesContent":["import {\n  useState,\n  createContext,\n  useContext,\n  useEffect\n} from 'react'\n\nimport { currentUserFn } from '../services/auth'\n\nexport const AppContext = createContext()\n\nexport const AppCtxProvider = props => {\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    async function getSessionData() {\n      const { data } = await currentUserFn()\n      login(data);\n    }\n\n    getSessionData()\n  }, [])\n\n  const login = userInfo => {\n    setUser(userInfo)\n  }\n\n  const logout = () => {\n    //TODO: Cerrar la sesion en el server y en el cliente\n    setUser(null)\n  }\n\n  const value = { user, login, logout }\n\n  return (\n    <AppContext.Provider {...props} value={value} />\n  )\n}\n\n// Opcional: agregamos un custom hook para evitar consumir en cada componente nuestro ctx\n\nexport const useContextInfo = () => useContext(AppContext)\n"]},"metadata":{},"sourceType":"module"}